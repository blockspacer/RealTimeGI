#version 330 core

out vec4 color;

in vec3 FragPos;
in vec3 Normal;
in vec3 ObjectColor;

uniform vec3 lightPos;
uniform vec3 viewPos;
uniform vec3 lightColor;

void main() {
	float ambientRatio = 0.0f;
	vec3 ambient = ambientRatio * lightColor;

	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(lightPos - FragPos);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diff * lightColor;

	float specularRatio = 0.1f;
	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 5);
	vec3 specular = specularRatio * spec * lightColor;

	vec3 result = (ambient + diffuse * 0.8 + specular) * ObjectColor;
	color = vec4(result, 1.0f);
}