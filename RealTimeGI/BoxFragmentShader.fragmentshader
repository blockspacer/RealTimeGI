#version 330 core

out vec4 color;

in vec3 FragPos;
in vec3 Normal;
in vec3 ObjectColor;

uniform vec3 lightPos;
uniform vec3 viewPos;
uniform vec3 lightColor;
uniform sampler1D texture;

#define PI 3.14159265359

float tansig_func(float input) {
	return (2.0 / (1 + exp(-2 * input)) - 1);
}

vec3 getColor(float input[15], int offset) {
	for (int i = 0; i < 15; ++i) {
		float inputMin = texelFetch(texture, i, 0).r;
		float inputMax = texelFetch(texture, 15 + i, 0).r;
		input[i] = 2 * (input[i] - inputMin) / (inputMax - inputMin) - 1.0;
	}

	float a0[20];
	for (int i = 0; i < 20; ++i) {
		a0[i] = 0.0;
		for (int k = 0; k < 15; ++k) {
			a0[i] += texelFetch(texture, 36 + i * 15 + k, 0).r * input[k];
		}
		a0[i] = tansig_func(a0[i] + texelFetch(texture, 336 + i, 0).r);
	}

	float a1[10];
	for (int i = 0; i < 10; ++i) {
		a1[i] = 0.0;
		for (int k = 0; k < 20; ++k) {
			a1[i] += texelFetch(texture, 356 + i * 20 + k, 0).r * a0[k];
		}
		a1[i] = tansig_func(a1[i] + texelFetch(texture, 556 + i, 0).r);
	}

	float output[3];
	for (int i = 0; i < 3; ++i) {
		output[i] = 0.0;
		for (int k = 0; k < 10; ++k) {
			output[i] += texelFetch(texture, 566 + i * 10 + k, 0).r * a1[k];
		}
		output[i] += texelFetch(texture, 596 + i, 0).r;
	}

	for (int i = 0; i < 3; ++i) {
		float outputMin = texelFetch(texture, 30 + i, 0).r;
		float outputMax = texelFetch(texture, 33 + i, 0).r;
		output[i] = (output[i] + 1) * (outputMin + outputMax) * 0.5 + outputMin;
	}

	return vec3(output[0], output[1], output[2]);
}

void main() {
	/*float ambientRatio = 0.0f;
	vec3 ambient = ambientRatio * lightColor;

	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(lightPos - FragPos);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diff * lightColor;

	float specularRatio = 0.1f;
	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 5);
	vec3 specular = specularRatio * spec * lightColor;

	vec3 result = (ambient + diffuse * 0.8 + specular) * ObjectColor;
	color = vec4(result, 1.0f);*/

	vec3 hitPoint = FragPos;
	vec3 viewDir = normalize(hitPoint - viewPos);
	vec3 normal = Normal;
	vec3 brdfParameter = ObjectColor;
	
	float input[15];
	for (int i = 0; i < 3; ++i) input[i] = hitPoint[i]; 
	for (int i = 0; i < 3; ++i) input[i + 3] = viewDir[i];
	for (int i = 0; i < 3; ++i) input[i + 6] = lightPos[i];
	for (int i = 0; i < 3; ++i) input[i + 9] = normal[i];
	for (int i = 0; i < 3; ++i) input[i + 12] = brdfParameter[i];

	vec3 direct = getColor(input, 0);
	vec3 indirect = getColor(input, 599);

	color = vec4(direct + indirect, 1.0);
}